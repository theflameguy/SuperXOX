{"ast":null,"code":"import React,{StrictMode}from'react';import{createRoot}from'react-dom/client';import'./Game.css';import{useState}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const initialBoards=Array(9).fill(null).map(()=>Array(9).fill(null));const colorPallet={color1:'#181C14',color2:'#3C3D37',color3:'#697565',color4:'#ECDFCC'};const WINNING_COMBINATIONS=[[0,1,2],[3,4,5],[6,7,8],// Rows\n[0,3,6],[1,4,7],[2,5,8],// Columns\n[0,4,8],[2,4,6]// Diagonals\n];const calculateBoardWinner=board=>{for(const[a,b,c]of WINNING_COMBINATIONS){if(board[a]&&board[a]===board[b]&&board[a]===board[c]){return board[a];}}return null;};const calculateGridWinner=boards=>{const gridWinners=boards.map(board=>calculateBoardWinner(board));for(const[a,b,c]of WINNING_COMBINATIONS){if(gridWinners[a]&&gridWinners[a]===gridWinners[b]&&gridWinners[a]===gridWinners[c]){return gridWinners[a];}}return null;};function Game(){const[boards,setBoards]=useState(initialBoards);const[xIsNext,setXIsNext]=useState(true);const[winner,setWinner]=useState(null);const[lastMove,setLastMove]=useState([null,null]);const checkInvalidMove=boardIndex=>{if(calculateBoardWinner(boards[boardIndex]))return 1;let invalid_move_flag=0;if(lastMove[1]!=null&&lastMove[1]!=boardIndex)invalid_move_flag=1;if(lastMove[1]!=null&&calculateBoardWinner(boards[lastMove[1]]))invalid_move_flag=0;return invalid_move_flag;};const handleClick=(boardIndex,cellIndex)=>{if(winner||boards[boardIndex][cellIndex])return;const newBoards=boards.map((board,i)=>i===boardIndex?board.map((cell,j)=>j===cellIndex?xIsNext?'X':'O':cell):board);if(checkInvalidMove(boardIndex))return;setLastMove([boardIndex,cellIndex]);setBoards(newBoards);setXIsNext(!xIsNext);const newWinner=calculateGridWinner(newBoards);setWinner(newWinner);};const renderBoard=boardIndex=>/*#__PURE__*/_jsx(Board,{board:boards[boardIndex],onClick:cellIndex=>handleClick(boardIndex,cellIndex)});const miniBoardStyle=i=>({border:'1px solid black',padding:'2px',background:checkInvalidMove(i)?'#393E46':'#71C9CE',margin:'auto',transition:'background-color 0.5s ease',overflow:'hidden',display:'grid',gridTemplateColumns:'auto auto auto'});return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{style:{padding:'15px',textAlign:'center'},children:!winner?`Next player: ${xIsNext?'X':'O'}`:`Woohoo!! ${winner} won`}),/*#__PURE__*/_jsx(\"div\",{className:\"fullBoard\",children:Array(9).fill(null).map((_,i)=>/*#__PURE__*/_jsx(\"div\",{className:\"miniBoard\",style:miniBoardStyle(i),children:renderBoard(i)},i))}),winner&&/*#__PURE__*/_jsx(\"div\",{children:`Winner: ${winner}`})]});}function Square(_ref){let{value,onClick,style}=_ref;return/*#__PURE__*/_jsx(\"button\",{style:style,onClick:onClick,children:value});}function Board(_ref2){let{board,onClick}=_ref2;return/*#__PURE__*/_jsx(\"div\",{style:{display:'grid',gridGap:'0px',gridTemplateColumns:'auto auto auto'},children:board.map((cell,i)=>/*#__PURE__*/_jsx(Square,{value:cell,onClick:()=>onClick(i)},i))});}export default Game;","map":{"version":3,"names":["React","StrictMode","createRoot","useState","jsx","_jsx","jsxs","_jsxs","initialBoards","Array","fill","map","colorPallet","color1","color2","color3","color4","WINNING_COMBINATIONS","calculateBoardWinner","board","a","b","c","calculateGridWinner","boards","gridWinners","Game","setBoards","xIsNext","setXIsNext","winner","setWinner","lastMove","setLastMove","checkInvalidMove","boardIndex","invalid_move_flag","handleClick","cellIndex","newBoards","i","cell","j","newWinner","renderBoard","Board","onClick","miniBoardStyle","border","padding","background","margin","transition","overflow","display","gridTemplateColumns","children","style","textAlign","className","_","Square","_ref","value","_ref2","gridGap"],"sources":["/Users/abhishek/Documents/js/react/react-xox/SuperXOX/src/Game.jsx"],"sourcesContent":["import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport './Game.css';\n\nimport { useState } from 'react';\n\nconst initialBoards = Array(9).fill(null).map(() => Array(9).fill(null));\n\nconst colorPallet = {\n  color1 : '#181C14',\n  color2 : '#3C3D37',\n  color3 : '#697565',\n  color4 : '#ECDFCC'\n\n}\n\nconst WINNING_COMBINATIONS = [\n  [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows\n  [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns\n  [0, 4, 8], [2, 4, 6] // Diagonals\n];\n\nconst calculateBoardWinner = (board) => {\n  for (const [a, b, c] of WINNING_COMBINATIONS) {\n    if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n      return board[a];\n    }\n  }\n  return null;\n};\n\nconst calculateGridWinner = (boards) => {\n  const gridWinners = boards.map((board) => calculateBoardWinner(board));\n  \n  for (const [a, b, c] of WINNING_COMBINATIONS) {\n    if (gridWinners[a] && gridWinners[a] === gridWinners[b] && gridWinners[a] === gridWinners[c]) {\n      return gridWinners[a];\n    }\n  }\n  return null;\n};\n\nfunction Game() {\n  const [boards, setBoards] = useState(initialBoards);\n  const [xIsNext, setXIsNext] = useState(true);\n  const [winner, setWinner] = useState(null);\n  const [lastMove, setLastMove] = useState([null,null]);\n  \n  const checkInvalidMove = (boardIndex) => {\n    if(calculateBoardWinner(boards[boardIndex])) return 1;\n    \n    let invalid_move_flag = 0\n    \n    if(lastMove[1]!= null && lastMove[1]!=boardIndex) invalid_move_flag=1;\n    if(lastMove[1]!= null && calculateBoardWinner(boards[lastMove[1]])) invalid_move_flag=0;\n    \n    return invalid_move_flag\n    \n  }\n\n\n  const handleClick = (boardIndex, cellIndex) => {\n    if (winner || boards[boardIndex][cellIndex]) return;\n    \n    const newBoards = boards.map((board, i) => \n      i === boardIndex \n        ? board.map((cell, j) => j === cellIndex ? (xIsNext ? 'X' : 'O') : cell)\n        : board\n    );\n\n    if(checkInvalidMove(boardIndex)) return;\n\n\n    \n\n    setLastMove([boardIndex,cellIndex])\n    setBoards(newBoards);\n    setXIsNext(!xIsNext);\n\n    const newWinner = calculateGridWinner(newBoards);\n    setWinner(newWinner);\n  };\n\n  const renderBoard = (boardIndex) => (\n    <Board\n      board={boards[boardIndex]}\n      onClick={(cellIndex) => handleClick(boardIndex, cellIndex)}\n      \n    />\n  );\n\n  const miniBoardStyle =(i) =>({\n    border: '1px solid black',\n    padding: '2px',\n    background: checkInvalidMove(i) ?  '#393E46' : '#71C9CE',\n    margin: 'auto',\n    transition: 'background-color 0.5s ease',\n    overflow: 'hidden',\n    display: 'grid',\n    gridTemplateColumns: 'auto auto auto'\n  })\n\n\n\n  return (\n    <div>\n      <h3 style={{ padding: '15px', textAlign: 'center' }} >\n        {!winner \n          ? `Next player: ${xIsNext ? 'X' : 'O'}`\n          : `Woohoo!! ${winner} won`}\n      </h3>\n      <div className='fullBoard'>\n        {Array(9).fill(null).map((_, i) => (\n          <div className='miniBoard' key={i} style={miniBoardStyle(i)}>\n            {renderBoard(i)}\n          </div>\n        ))}\n      </div>\n      {winner && <div>{`Winner: ${winner}`}</div>}\n    </div>\n  );\n}\n\n\n\nfunction Square({ value, onClick, style }) {\n  return (\n    <button \n      style={style}\n      onClick={onClick}\n    >\n      {value}\n    </button>\n  );\n}\n\nfunction Board({ board, onClick}) {\n  return (\n    <div style={{ display: 'grid',gridGap: '0px' , gridTemplateColumns: 'auto auto auto' }}>\n      {board.map((cell, i) => (\n        <Square key={i} value={cell} onClick={() => onClick(i)} />\n      ))}\n    </div>\n  );\n}\n\nexport default Game"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}