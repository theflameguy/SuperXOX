
<!DOCTYPE html>
<html>
<body>
  <div id="root"></div>
</body>
<!-- This setup is not suitable for production. -->
<!-- Only use it in development! -->
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
<script async src="https://ga.jspm.io/npm:es-module-shims@1.7.0/dist/es-module-shims.js"></script>
<script type="importmap">
{
  "imports": {
    "react": "https://esm.sh/react?dev",
    "react-dom/client": "https://esm.sh/react-dom/client?dev"
  }
}
</script>
<script type="text/babel" data-type="module">
import React, { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';

import { useState } from 'react';

const initialBoards = Array(9).fill(null).map(() => Array(9).fill(null));

const WINNING_COMBINATIONS = [
  [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows
  [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns
  [0, 4, 8], [2, 4, 6] // Diagonals
];

const calculateBoardWinner = (board) => {
  for (const [a, b, c] of WINNING_COMBINATIONS) {
    if (board[a] && board[a] === board[b] && board[a] === board[c]) {
      return board[a];
    }
  }
  return null;
};

const calculateGridWinner = (boards) => {
  const gridWinners = boards.map((board) => calculateBoardWinner(board));
  
  for (const [a, b, c] of WINNING_COMBINATIONS) {
    if (gridWinners[a] && gridWinners[a] === gridWinners[b] && gridWinners[a] === gridWinners[c]) {
      return gridWinners[a];
    }
  }
  return null;
};

function Game() {
  const [boards, setBoards] = useState(initialBoards);
  const [xIsNext, setXIsNext] = useState(true);
  const [winner, setWinner] = useState(null);
  const [lastMove, setLastMove] = useState([null,null]);

  const checkInvalidMove = (boardIndex) => {
    if(calculateBoardWinner(boards[boardIndex])) return 1;

    let invalid_move_flag = 0
    
    if(lastMove[1]!= null && lastMove[1]!=boardIndex) invalid_move_flag=1;
    if(lastMove[1]!= null && calculateBoardWinner(boards[lastMove[1]])) invalid_move_flag=0;

    return invalid_move_flag

  }


  const handleClick = (boardIndex, cellIndex) => {
    if (winner || boards[boardIndex][cellIndex]) return;
    
    const newBoards = boards.map((board, i) => 
      i === boardIndex 
        ? board.map((cell, j) => j === cellIndex ? (xIsNext ? 'X' : 'O') : cell)
        : board
    );

    if(checkInvalidMove(boardIndex)) return;


    

    setLastMove([boardIndex,cellIndex])
    setBoards(newBoards);
    setXIsNext(!xIsNext);

    const newWinner = calculateGridWinner(newBoards);
    setWinner(newWinner);
  };

  const renderBoard = (boardIndex) => (
    <Board
      board={boards[boardIndex]}
      onClick={(cellIndex) => handleClick(boardIndex, cellIndex)}
    />
  );

  return (
    <div>
      <div>
        {!winner 
          ? `Next player: ${xIsNext ? 'X' : 'O'}`
          : `Woohoo!! ${winner} won`}
      </div>
      <div style={{margin: 'auto', width:'34rem', display: 'grid', gridTemplateColumns: 'auto auto auto' }}>
        {Array(9).fill(null).map((_, i) => (
          <div key={i} style={{ border: '2px solid black', padding: '1px',background: checkInvalidMove(i) ? 'rgba(209, 57, 0, 0.329)' : 'white', transition: 'background-color 0.4s ease'}}>
            {renderBoard(i)}
          </div>
        ))}
      </div>
      {winner && <div>{`Winner: ${winner}`}</div>}
    </div>
  );
}

function Square({ value, onClick }) {
  return (
    <button 
      style={{ width: '60px', height: '60px', fontSize: '3rem' }}
      onClick={onClick}
    >
      {value}
    </button>
  );
}

function Board({ board, onClick }) {
  return (
    <div style={{ display: 'grid', gridTemplateColumns: 'auto auto auto' }}>
      {board.map((cell, i) => (
        <Square key={i} value={cell} onClick={() => onClick(i)} />
      ))}
    </div>
  );
}


function App() {
  
    return (
    <div className="App">
      <h1>Super Tic Tac Toe</h1>
      <Game />
    </div>
    );
}

const root = createRoot(document.getElementById('root'));
root.render(
  <StrictMode>
    <App />
  </StrictMode>
);
</script>
<style>

.App {
  text-align: center;
}

button {
  background: rgba(252, 255, 236, 0.329);
  border: 1px solid black;
  cursor: pointer;
  outline: none;
}

button:hover {
  background: #8d8a00;
  transition: background-color 0.3s ease;
}

</style>
</html>
